package com.tw;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    private Input input;
    private Output output;
    private List<Student> students;

    public List<Student> getStudents() {
        return students;
    }

    public void setStudents(List<Student> students) {
        this.students = students;
    }

    public Library() {
    }

    public Library(Input input, Output output, List<Student> students) {
        this.input = input;
        this.output = output;
        this.students = students;
    }

    public boolean addStudentFunc() {
        System.out.println(output.addStudent);
        String studentStr = input.readInput();
        while (!formatCheckForStudentInfo(studentStr)) {
            System.out.println(output.falseRemindForAddStudent);
            studentStr = input.readInput();
        }
        return addOneStudent(studentStr);
    }

    public boolean formatCheckForStudentInfo(String studentStr) {
        try {
            String[] student = studentStr.split(",");
            if (student.length >= 3) {
                for (int i = 2; i < student.length; i++) {
                    String course = student[i];
                    if (course.contains(":")) {
                        if (!isDouble(course.substring(course.indexOf(":") + 1))) {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            return false;
        }
    }

    public boolean isDouble(String score) {
        try {
            Double parseDouble = Double.parseDouble(score);
            if (parseDouble instanceof Double == false) {
                return false;
            } else {
                return true;
            }
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public boolean addOneStudent(String studentStr) {
        try {
            String[] studentInfo = studentStr.split(",");
            String name = studentInfo[0];
            String number = studentInfo[1];
            Map<String, Double> courses = new HashMap<>();
            for (int i = 2; i < studentInfo.length; i++) {
                String courseStr = studentInfo[i];
                int index = courseStr.indexOf(":");
                courses.put(courseStr.substring(0, index), Double.parseDouble(courseStr.substring(index + 1)));
            }
            students.add(new Student(name, number, courses));
            System.out.println("学生" + name + "的成绩被添加");
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public boolean getReportCard() {
        System.out.println(output.printStudent);
        String inputNumber = input.readInput();
        List<Student> studentList = new ArrayList<>();
        while(formatCheckForStudentNumber(inputNumber) == null) {
            System.out.println(output.falseRemindForPrintStudent);
            inputNumber = input.readInput();
        }
        for (String number : formatCheckForStudentNumber(inputNumber)) {
            if (findStudent(students,number) != null) {
                studentList.add(findStudent(students,number));
            }
        }
        output.outputReport(studentList);
        return true;
    }

    public Student findStudent(List<Student> students, String number) {
        for (Student student : students) {
            if(student.getNumber().equals(number)) {
                return student;
            }
        }
        return null;
    }

    public String[] formatCheckForStudentNumber(String inputNumber) {
        try {
            return inputNumber.split(",");
        } catch (Exception e) {
            return null;
        }
    }

    public void func() {
        boolean quit = false;
        while(!quit) {
            output.outputMainPage();
            String number = input.readInput();
            if(checkForSelectNumber(number)) {
                int type = Integer.parseInt(number);
                if(type == 1) {
                    addStudentFunc();
                } else if (type == 2) {
                    getReportCard();
                } else {
                    quit = true;
                }
            }
        }
    }

    public boolean checkForSelectNumber(String number) {
        return number.matches("[0-9]+");
    }

    public boolean someLibraryMethod() {
        return true;
    }
}
